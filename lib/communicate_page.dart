import 'package:flutter/material.dart';

// Mod√®le
class Phrase {
  final String francais;
  final String japonais;
  final String romaji;
  final String emoji;

  Phrase({
    required this.francais,
    required this.japonais,
    required this.romaji,
    required this.emoji,
  });
}

final Map<String, List<Phrase>> phrasesParCategorie = {
  'Salutations et Politesse': [
    Phrase(
      francais: 'Bonjour (le matin)',
      japonais: '„Åä„ÅØ„Çà„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô',
      romaji: 'Ohayou gozaimasu',
      emoji: 'üåÖ',
    ),
    Phrase(
      francais: 'Bonjour (journ√©e)',
      japonais: '„Åì„Çì„Å´„Å°„ÅØ',
      romaji: 'Konnichiwa',
      emoji: '‚òÄÔ∏è',
    ),
    Phrase(
      francais: 'Bonsoir',
      japonais: '„Åì„Çì„Å∞„Çì„ÅØ',
      romaji: 'Konbanwa',
      emoji: 'üåÜ',
    ),
    Phrase(
      francais: 'Au revoir',
      japonais: '„Åï„Çà„ÅÜ„Å™„Çâ',
      romaji: 'Sayounara',
      emoji: 'üëã',
    ),
    Phrase(
      francais: 'Merci',
      japonais: '„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô',
      romaji: 'Arigatou gozaimasu',
      emoji: 'üôè',
    ),
    Phrase(
      francais: 'S\'il vous pla√Æt',
      japonais: '„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô',
      romaji: 'Onegaishimasu',
      emoji: 'üôá',
    ),
    Phrase(
      francais: 'Excusez-moi / Pardon',
      japonais: '„Åô„Åø„Åæ„Åõ„Çì',
      romaji: 'Sumimasen',
      emoji: 'üòÖ',
    ),
    Phrase(
      francais: 'De rien',
      japonais: '„Å©„ÅÜ„ÅÑ„Åü„Åó„Åæ„Åó„Å¶',
      romaji: 'Dou itashimashite',
      emoji: 'üòä',
    ),
    Phrase(francais: 'Oui', japonais: '„ÅØ„ÅÑ', romaji: 'Hai', emoji: 'üëç'),
    Phrase(francais: 'Non', japonais: '„ÅÑ„ÅÑ„Åà', romaji: 'Iie', emoji: 'üôÖ'),
  ],

  'Se Pr√©senter et Se D√©crire': [
    Phrase(
      francais: 'Je m\'appelle...',
      japonais: '„Çè„Åü„Åó„ÅÆÂêçÂâç„ÅØ...„Åß„Åô',
      romaji: 'Watashi no namae wa ... desu',
      emoji: 'üôã',
    ),
    Phrase(
      francais: 'Enchant√©',
      japonais: '„ÅØ„Åò„ÇÅ„Åæ„Åó„Å¶',
      romaji: 'Hajimemashite',
      emoji: 'ü§ù',
    ),
    Phrase(
      francais: 'Je suis fran√ßais(e)',
      japonais: '„Éï„É©„É≥„Çπ‰∫∫„Åß„Åô',
      romaji: 'Furansu-jin desu',
      emoji: 'üá´üá∑',
    ),
  ],

  'Orientation et Directions': [
    Phrase(
      francais: 'O√π est ... ?',
      japonais: '... „ÅØ„Å©„Åì„Åß„Åô„Åã?',
      romaji: '... wa doko desu ka?',
      emoji: 'üìç',
    ),
    Phrase(francais: 'La gare', japonais: 'ÈßÖ', romaji: 'Eki', emoji: 'üöâ'),
    Phrase(
      francais: 'Les toilettes',
      japonais: '„Éà„Ç§„É¨',
      romaji: 'Toire',
      emoji: 'üöª',
    ),
    Phrase(
      francais: 'L\'h√¥tel',
      japonais: '„Éõ„ÉÜ„É´',
      romaji: 'Hoteru',
      emoji: 'üè®',
    ),
    Phrase(
      francais: 'Ce train va √† ... ?',
      japonais: '„Åì„ÅÆÈõªËªä„ÅØ...„Å∏Ë°å„Åç„Åæ„Åô„Åã?',
      romaji: 'Kono densha wa ... e ikimasu ka?',
      emoji: 'üöÜ',
    ),
    Phrase(francais: '√Ä gauche', japonais: 'Â∑¶', romaji: 'Hidari', emoji: '‚¨ÖÔ∏è'),
    Phrase(francais: '√Ä droite', japonais: 'Âè≥', romaji: 'Migi', emoji: '‚û°Ô∏è'),
    Phrase(
      francais: 'Tout droit',
      japonais: '„Åæ„Å£„Åô„Åê',
      romaji: 'Massugu',
      emoji: '‚¨ÜÔ∏è',
    ),
  ],

  'Restaurants et Repas': [
    Phrase(
      francais: 'Le menu, s\'il vous pla√Æt',
      japonais: '„É°„Éã„É•„Éº„Çí„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô',
      romaji: 'Menyuu o onegaishimasu',
      emoji: 'üìã',
    ),
    Phrase(
      francais: 'C\'est quoi ce plat ?',
      japonais: '„Åì„Çå„ÅØ‰Ωï„Åß„Åô„Åã?',
      romaji: 'Kore wa nan desu ka?',
      emoji: 'üçΩÔ∏è',
    ),
    Phrase(
      francais: 'Je suis allergique √† ...',
      japonais: '...„ÅÆ„Ç¢„É¨„É´„ÇÆ„Éº„Åå„ÅÇ„Çä„Åæ„Åô',
      romaji: '... no arerugii ga arimasu',
      emoji: '‚ö†Ô∏è',
    ),
    Phrase(
      francais: 'Sans viande, s\'il vous pla√Æt',
      japonais: 'ËÇâ„Å™„Åó„Åß„ÅäÈ°ò„ÅÑ„Åó„Åæ„Åô',
      romaji: 'Niku nashi de onegaishimasu',
      emoji: 'ü•¶',
    ),
    Phrase(
      francais: 'C\'√©tait d√©licieux',
      japonais: '„Åä„ÅÑ„Åó„Åã„Å£„Åü„Åß„Åô',
      romaji: 'Oishikatta desu',
      emoji: 'üòã',
    ),
  ],

  'Shopping et Argent': [
    Phrase(
      francais: 'Combien √ßa co√ªte ?',
      japonais: '„ÅÑ„Åè„Çâ„Åß„Åô„Åã?',
      romaji: 'Ikura desu ka?',
      emoji: 'üí∞',
    ),
    Phrase(
      francais: 'Trop cher',
      japonais: 'È´ò„Åô„Åé„Åæ„Åô',
      romaji: 'Taka sugimasu',
      emoji: 'üí∏',
    ),
    Phrase(
      francais: 'Je veux acheter √ßa',
      japonais: '„Åì„Çå„ÇíË≤∑„ÅÑ„Åü„ÅÑ„Åß„Åô',
      romaji: 'Kore o kaitai desu',
      emoji: 'üõçÔ∏è',
    ),
    Phrase(
      francais: 'Avez-vous la taille M ?',
      japonais: 'M„Çµ„Ç§„Ç∫„ÅØ„ÅÇ„Çä„Åæ„Åô„Åã?',
      romaji: 'M saizu wa arimasu ka?',
      emoji: 'üìè',
    ),
  ],

  'Transport et D√©placements': [
    Phrase(
      francais: '√Ä quelle heure part le dernier train ?',
      japonais: 'ÊúÄÁµÇÈõªËªä„ÅØ‰ΩïÊôÇ„Åß„Åô„ÅãÔºü',
      romaji: 'Saishuu densha wa nanji desu ka?',
      emoji: '‚è∞',
    ),
    Phrase(
      francais: 'Je veux aller √† l\'a√©roport',
      japonais: 'Á©∫Ê∏Ø„Å´Ë°å„Åç„Åü„ÅÑ„Åß„Åô',
      romaji: 'Kuukou ni ikitai desu',
      emoji: '‚úàÔ∏è',
    ),
  ],

  'Loisirs et Visites Culturelles': [
    Phrase(
      francais: 'Pouvez-vous me recommander un mus√©e ?',
      japonais: 'ÂçöÁâ©È§®„Çí„Åä„Åô„Åô„ÇÅ„Åß„Åç„Åæ„Åô„ÅãÔºü',
      romaji: 'Hakubutsukan o osusume dekimasu ka?',
      emoji: 'üñºÔ∏è',
    ),
    Phrase(
      francais: 'O√π est le temple le plus proche ?',
      japonais: '‰∏ÄÁï™Ëøë„ÅÑÂØ∫„ÅØ„Å©„Åì„Åß„Åô„ÅãÔºü',
      romaji: 'Ichiban chikai tera wa doko desu ka?',
      emoji: '‚õ©Ô∏è',
    ),
    Phrase(
      francais:
          'Quel est le meilleur endroit pour voir des cerisiers en fleurs ?',
      japonais: 'Ê°ú„ÇíË¶ã„Çã„ÅÆ„Å´‰∏ÄÁï™„ÅÑ„ÅÑÂ†¥ÊâÄ„ÅØ„Å©„Åì„Åß„Åô„ÅãÔºü',
      romaji: 'Sakura o miru no ni ichiban ii basho wa doko desu ka?',
      emoji: 'üå∏',
    ),
  ],

  'Sant√© et S√©curit√©': [
    Phrase(
      francais: 'Y a-t-il un distributeur de billets pr√®s d\'ici ?',
      japonais: 'Ëøë„Åè„Å´ATM„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü',
      romaji: 'Chikaku ni ATM wa arimasu ka?',
      emoji: 'üí≥',
    ),
    Phrase(
      francais: 'Je suis allergique √† ...',
      japonais: '...„Ç¢„É¨„É´„ÇÆ„Éº„Åå„ÅÇ„Çä„Åæ„Åô',
      romaji: '... arerugii ga arimasu',
      emoji: '‚ö†Ô∏è',
    ),
  ],

  'Langue et Communication': [
    Phrase(
      francais: 'Parlez-vous anglais ?',
      japonais: 'Ëã±Ë™û„ÇíË©±„Åõ„Åæ„Åô„ÅãÔºü',
      romaji: 'Eigo o hanasemasu ka?',
      emoji: 'üá¨üáß',
    ),
    Phrase(
      francais: 'Je ne parle pas bien japonais',
      japonais: 'Êó•Êú¨Ë™û„Åå‰∏äÊâã„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì',
      romaji: 'Nihongo ga jouzu de wa arimasen',
      emoji: 'üòÖ',
    ),
  ],
};

class CommunicatePage extends StatefulWidget {
  const CommunicatePage({super.key});

  @override
  _CommunicatePageState createState() => _CommunicatePageState();
}

class _CommunicatePageState extends State<CommunicatePage> {
  String _searchQuery = '';
  bool _isSearching = false;

  @override
  Widget build(BuildContext context) {
    // Filtrer les phrases selon la recherche
    final filteredPhrases =
        phrasesParCategorie.entries
            .map((entry) {
              final filteredList =
                  entry.value.where((phrase) {
                    return phrase.francais.toLowerCase().contains(
                          _searchQuery.toLowerCase(),
                        ) ||
                        phrase.japonais.toLowerCase().contains(
                          _searchQuery.toLowerCase(),
                        ) ||
                        phrase.romaji.toLowerCase().contains(
                          _searchQuery.toLowerCase(),
                        );
                  }).toList();

              return MapEntry(entry.key, filteredList);
            })
            .where((entry) => entry.value.isNotEmpty)
            .toList();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Pour blablater'),
        actions: [
          // Barre de recherche dans l'AppBar
          Padding(
            padding: const EdgeInsets.only(right: 8.0),
            child: IconButton(
              icon: const Icon(Icons.search),
              onPressed: () {
                showSearch(context: context, delegate: PhraseSearchDelegate());
              },
            ),
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              decoration: const InputDecoration(
                hintText: 'Rechercher une phrase...',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.search),
              ),
              onChanged: (query) {
                setState(() {
                  _searchQuery = query;
                  _isSearching = query.isNotEmpty;
                });
              },
            ),
          ),
          Expanded(
            child:
                _isSearching
                    ? ListView(
                      children:
                          filteredPhrases.expand((entry) {
                            return entry.value.map((phrase) {
                              return ListTile(
                                leading: Text(
                                  phrase.emoji,
                                  style: const TextStyle(fontSize: 24),
                                ),
                                title: Text(phrase.francais),
                                subtitle: Padding(
                                  padding: const EdgeInsets.only(top: 4.0),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        phrase.japonais,
                                        style: const TextStyle(fontSize: 16),
                                      ),
                                      Text(
                                        phrase.romaji,
                                        style: const TextStyle(
                                          color: Colors.grey,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              );
                            }).toList();
                          }).toList(),
                    )
                    : ListView(
                      children:
                          phrasesParCategorie.entries.map((entry) {
                            return ExpansionTile(
                              title: Text(
                                entry.key,
                                style: const TextStyle(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              children:
                                  entry.value.map((phrase) {
                                    return ListTile(
                                      leading: Text(
                                        phrase.emoji,
                                        style: const TextStyle(fontSize: 24),
                                      ),
                                      title: Text(phrase.francais),
                                      subtitle: Padding(
                                        padding: const EdgeInsets.only(
                                          top: 4.0,
                                        ),
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          children: [
                                            Text(
                                              phrase.japonais,
                                              style: const TextStyle(
                                                fontSize: 16,
                                              ),
                                            ),
                                            Text(
                                              phrase.romaji,
                                              style: const TextStyle(
                                                color: Colors.grey,
                                              ),
                                            ),
                                          ],
                                        ),
                                      ),
                                    );
                                  }).toList(),
                            );
                          }).toList(),
                    ),
          ),
        ],
      ),
    );
  }
}

class PhraseSearchDelegate extends SearchDelegate<String> {
  @override
  List<Widget> buildActions(BuildContext context) {
    return [
      IconButton(
        icon: const Icon(Icons.clear),
        onPressed: () {
          query = '';
        },
      ),
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    return IconButton(
      icon: const Icon(Icons.arrow_back),
      onPressed: () {
        close(context, '');
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    final results =
        phrasesParCategorie.entries
            .map((entry) {
              final filteredList =
                  entry.value.where((phrase) {
                    return phrase.francais.toLowerCase().contains(
                          query.toLowerCase(),
                        ) ||
                        phrase.japonais.toLowerCase().contains(
                          query.toLowerCase(),
                        ) ||
                        phrase.romaji.toLowerCase().contains(
                          query.toLowerCase(),
                        );
                  }).toList();

              return MapEntry(entry.key, filteredList);
            })
            .where((entry) => entry.value.isNotEmpty)
            .toList();

    return ListView(
      children:
          results.expand((entry) {
            return entry.value.map((phrase) {
              return ListTile(
                leading: Text(
                  phrase.emoji,
                  style: const TextStyle(fontSize: 24),
                ),
                title: Text(phrase.francais),
                subtitle: Padding(
                  padding: const EdgeInsets.only(top: 4.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        phrase.japonais,
                        style: const TextStyle(fontSize: 16),
                      ),
                      Text(
                        phrase.romaji,
                        style: const TextStyle(color: Colors.grey),
                      ),
                    ],
                  ),
                ),
              );
            }).toList();
          }).toList(),
    );
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    final suggestions =
        phrasesParCategorie.entries
            .map((entry) {
              final filteredList =
                  entry.value.where((phrase) {
                    return phrase.francais.toLowerCase().contains(
                          query.toLowerCase(),
                        ) ||
                        phrase.japonais.toLowerCase().contains(
                          query.toLowerCase(),
                        ) ||
                        phrase.romaji.toLowerCase().contains(
                          query.toLowerCase(),
                        );
                  }).toList();

              return MapEntry(entry.key, filteredList);
            })
            .where((entry) => entry.value.isNotEmpty)
            .toList();

    return ListView(
      children:
          suggestions.expand((entry) {
            return entry.value.map((phrase) {
              return ListTile(
                leading: Text(
                  phrase.emoji,
                  style: const TextStyle(fontSize: 24),
                ),
                title: Text(phrase.francais),
                subtitle: Padding(
                  padding: const EdgeInsets.only(top: 4.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        phrase.japonais,
                        style: const TextStyle(fontSize: 16),
                      ),
                      Text(
                        phrase.romaji,
                        style: const TextStyle(color: Colors.grey),
                      ),
                    ],
                  ),
                ),
              );
            }).toList();
          }).toList(),
    );
  }
}
